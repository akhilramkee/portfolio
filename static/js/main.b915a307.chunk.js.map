{"version":3,"sources":["components/nav.js","components/firstPage.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","props","useState","isOpen","setIsOpen","Navbar","color","dark","Container","NavbarBrand","href","NavbarToggler","onClick","className","Collapse","navbar","Nav","NavItem","NavLink","FrontPage","style","height","paddingTop","paddingBottom","Row","border","backgroundColor","marginLeft","marginRight","Col","alignItems","textAlign","fontSize","sm","size","order","offset","steps","loop","Infinity","wrapper","App","overflow","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gTAiCeA,G,MA5BI,SAACC,GAAS,IAAD,EAEIC,oBAAS,GAFb,mBAEjBC,EAFiB,KAETC,EAFS,KAKxB,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,MAAM,UAAUC,MAAI,GAC1B,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAaC,KAAK,KAAlB,YACA,kBAACC,EAAA,EAAD,CAAeC,QAPR,kBAAMR,GAAWD,IAOQU,UAAU,iBAC1C,kBAACC,EAAA,EAAD,CAAUX,OAAQA,EAAQY,QAAM,GAC9B,kBAACC,EAAA,EAAD,CAAKH,UAAU,UAAUE,QAAM,GAC3B,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASR,KAAK,KAAd,QACA,kBAACQ,EAAA,EAAD,CAASR,KAAK,SAAd,SACA,kBAACQ,EAAA,EAAD,CAASR,KAAK,UAAd,UACA,kBAACQ,EAAA,EAAD,CAASR,KAAK,QAAd,WACA,kBAACQ,EAAA,EAAD,CAASR,KAAK,WAAd,mB,gCCsBLS,EArCG,SAAC,GAAU,EAATlB,MAGhB,OACI,yBAAKmB,MAAO,CAACC,OAAO,QAAQC,WAAW,MAAMC,cAAc,QACxD,kBAACC,EAAA,EAAD,CAAKJ,MAAO,CAACK,OAAO,qBAAqBC,gBAAgB,UAAUC,WAAW,KAAKC,YAAY,OAC1F,kBAACC,EAAA,EAAD,KACI,yBAAKhB,UAAU,cACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,kBACf,yBAAKA,UAAU,SACX,yBAAKA,UAAU,YAM/B,kBAACgB,EAAA,EAAD,KACI,kBAACL,EAAA,EAAD,CAAKJ,MAAO,CAACU,WAAW,SAAUC,UAAU,SAASC,SAAS,QAC1D,kBAACH,EAAA,EAAD,CAAKI,GAAI,CAAEC,KAAM,EAAGC,MAAO,EAAGC,OAAQ,IAAtC,aAEJ,kBAACZ,EAAA,EAAD,CAAKJ,MAAO,CAACW,UAAU,SAASC,SAAS,QACrC,kBAACH,EAAA,EAAD,CAAKI,GAAI,CAAEC,KAAK,EAAGC,MAAM,EAAGC,OAAQ,IAAI,kBAAC,IAAD,CACpCC,MAAO,CAAC,aAAa,IAAK,OAAO,IAAK,QAAQ,KAC9CC,KAAMC,IACNC,QAAQ,YCjBrBC,MATf,WACE,OACE,yBAAKrB,MAAO,CAACM,gBAAgB,UAAUgB,SAAS,SAASpC,MAAM,YAC7D,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b915a307.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { Collapse, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem, NavLink, Container\n} from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nconst Navigation = (props)=>{\n\n    const [isOpen, setIsOpen] = useState(false);\n    const toggle = () => setIsOpen(!isOpen);\n\n    return(\n      <div>\n        <Navbar color=\"#282828\" dark>\n          <Container>\n            <NavbarBrand href=\"/\">AKHILESH</NavbarBrand>\n            <NavbarToggler onClick={toggle} className=\"navbar-light\" />\n            <Collapse isOpen={isOpen} navbar>\n              <Nav className=\"ml-auto\" navbar>\n                  <NavItem>\n                    <NavLink href=\"#\">HOME</NavLink>\n                    <NavLink href=\"about\">ABOUT</NavLink>\n                    <NavLink href=\"skills\">SKILLS</NavLink>\n                    <NavLink href=\"path\">JOURNEY</NavLink>\n                    <NavLink href=\"contact\">CONTACT</NavLink>\n                  </NavItem>\n              </Nav>\n            </Collapse>\n          </Container>\n        </Navbar>\n      </div>\n    )\n}\n\nexport default Navigation;\n","import React from 'react';\nimport { Row,\n    Col,\n  } from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport '../css/profile.scss';\nimport Typical from 'react-typical';\n\nconst FrontPage = ({props})=>{\n\n\n    return(\n        <div style={{height:'100vh',paddingTop:'10%',paddingBottom:'10%'}}>\n           <Row style={{border:'2px dashed #FDD529',backgroundColor:'#6203fc',marginLeft:'3%',marginRight:'3%'}}>\n                <Col>\n                    <div className=\"container1\">\n                        <div className=\"box\">\n                            <div className=\"spin-container\">\n                            <div className=\"shape\">\n                                <div className=\"bd\"></div>\n                            </div>\n                            </div>\n                        </div>\n                    </div>\n                </Col>\n                <Col>\n                    <Row style={{alignItems:'center', textAlign:'center',fontSize:'6vw'}}>\n                        <Col sm={{ size: 7, order: 1, offset: 1 }}>AKHILESH</Col>\n                    </Row>\n                    <Row style={{textAlign:'center',fontSize:'4vw'}}>\n                        <Col sm={{ size:7, order:1, offset: 1}}><Typical\n                            steps={['Programmer',1000,'Nerd',1000,'Otaku',1000]}\n                            loop={Infinity}\n                            wrapper=\"p\"\n                            />\n                        </Col>\n                    </Row>\n                </Col>\n           </Row>        \n        </div>\n    );\n\n\n}\n\nexport default FrontPage;","import React from 'react';\nimport Navigation from './components/nav.js';\nimport FrontPage from './components/firstPage.js';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\n\nfunction App() {\n  return (\n    <div style={{backgroundColor:'#282828',overflow:'hidden',color:'#F4D529'}}>\n      <Navigation />\n      <FrontPage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}